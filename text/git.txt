Git
===

  git status                        [check current code against branch]

  git reset                         [remove all staged changes]
  git reset --hard HEAD~            [reset most recent commit and remove code]
  git reset --soft HEAD~1           [remove last commit, ie move to HEAD~1]

  [Take commit before the most recent and restore it infront of the recent commit]
  git revert HEAD~1 --no-edit

  git log --oneline
  git logu                          [selfed defined with username and colours]

  git commit -m "...."              [commit staged changes with message]
  git commit --amend                [staged changes added to most recent commit]
                                    [message is edited]

  [squash the last 3 commits, change pick to squash except on last commit]
  git rebase -i HEAD~3

  [code changes in branch, pull changes and move your commits to end]
  git pull --rebase
  [big code changes and merges with your version of the repository]
  git pull

  git checkout existing_branch
  git checkout -b new_branch        [create new branch]
  git branch -m new_branch_name     [rename a branch]
  git branch -d new_branch_name     [delete a branch]

  [delete multiple branches that begin with feature]
  git branch -D `git branch --list 'feature/*'`

  [useful if cannot checkout remote branch]
  git ls-remote origin <branch>     [lists remote branches]
  git fetch origin <branch>

  git push origin branch_name

  [Add specific commits to the current branch using git log hashcode]
  git cherry-pick branchhashcode

  git stash list                    [show stashes]
  git stash show -p                 [detailed diff between recent stash and code]
  git stash save <message>          [save stash with a message]
  git stash apply                   [apply most recent stash to code]
  git stash populate                [apply recent stash and remove]
  git stash drop stash@{1}          [remove stash 1]
  git stash clear                   [remove entire stash]

  [Multiple git accounts on one computer]

    [To switch between users, you can use the following commands]:
    [git has --local, --global and --system, the default is --local]
    git config --local user.name "MarkyMark1000"
    git config --local user.email mark_john_wilson@yahoo.co.uk
    git config -l                     [see who you are logged in as]

    [create multiple keys in the ~/.ssh directory and load into gitlab etc]
    ssh-keygen -t rsa -C “mark_john_wilson@yahoo.co.uk”
    [tell .ssh that the new key exists]
    ssh-add ~/.ssh/id_rsa_newsshkey
    [code must be associated with the appropriate remote repository, eg]
    git remote add origin git@github.com:MarkyMark1000/new_repository.git
    [setup a config (not .txt) file in the ~/.ssh directory to specify which]
    [keys to use for a path]
      Host github.com
        HostName github.com
        User git
        IdentityFile ~/.ssh/id_rsa_newsshkey
      Host github-blah.com
        HostName github.com
        User git
        IdentityFile ~/.ssh/id_rsa_blah
    
    [to analyse and change which remote repositories code is looking at]
    git remote -v
    git remote set-url origin git@github.com:USERNAME/Repository.git

  .gitkeep  - filename commonly used to keep directories within git.

  Worktrees
  ---------

  Temporary way to look at branches without worrying about commits not being finished or
  needing to stash changes.    Use for short periods of time only.
    
  Initial Setup:
  - move to the parent directory to the git repository (eg cd .. or cd ../..)
    and then create a new directory structure, eg mkdir project_worktrees
  - Within vs code add the folder project_worktrees to your project so you can navigate between
     then.   VSCode should recognise that you have different branches checked out.
  - return to the project directory (eg cd ./project or cd ./blah/project)

  General use:
  -
    # create a worktree, which should be added to the worktree directory
    git worktree create ../project/project_worktrees        
  -
    # remove a directory, should be removed from worktree directory
    git worktree remove ../project/project_worktrees      # 

