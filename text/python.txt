COMMANDS
========

Useful for debugging or initial setup:
--------------------------------------

help(...)            - help on the topic
dir(...)             - lists methods associated with object
vars(...)            - prints variables associated with object

(), [], {}           - setup tuple, list, set or dictionary
[5]*5                - setup list with 5 initial values of 5

a[-1]                - get last element
a[:-3]               - get up to 3rd last element
a[::-2]              - get but going backwards in steps of -2

list.copy, etc       - basic shallow copy works for basic types

Basic core Python:
------------------

abs()                all()             any()             ascii()           bin()
callable()           chr()             compile()         complex()         divmod()
enumerate()          eval()            exec()
filter()             float()           format()          frozenset()
getattr()            globals()
hasattr()            help()            hex()
id()                 int()             isinstance()      issubclass()
iter()
len()                list()            locals()
map()                max()             memoryview()      min()             next()
object()             oct()             open()            ord()
pow()                print()
range()              repr()            reversed()        round()
set()                setattr()         slice()           sorted()
str()                sum()             super()
tuple()              type()
zip()

Core Type methods
-----------------

str.capitalize, str.lower, str.upper, str.swapcase
str.startswith, str.endswith

str.find, str.rfind                 [find lowest index from left/right or return -1]
str.index, str.rindex               [find lowest index from left/right or raise error]

str.isalnum, str.isalpha, str.isdigit, str.islower, str.isnumeric, str.isupper
str.join
str.lstrip, str.rstrip, str.strip
str.replace
str.split, str.rsplit

list.append, list.extend            [add object or list/iterable to end of list]
list.index, tuple.index             [find item index or raise error]
list.insert                         [before index, insert object]
list.pop                            [remove and return item at index, default last]
list.remove                         [remove first occurance of value]
list.reverse
list.sort

dict.get                            [get value for key OR default value]
dict['z']=value, dict.update        [add single k:v or dictionary]
dict.keys, dict.values, dict.items
dict.pop, dict.popitem              [remove element by key or remove last element(lifo)]

set.add, set.update                 [add one elemnt or iterables to the set]
set.difference (_update)            [return set of items in first set, but not input set, can update set]
set.discard                         [remove single item from set if present (no error)]
set.intersection (_update)          [return set of items present in both sets, can also update set]
set.isdisjoint                      [return true if none of items are present in both sets]
set.issubset                        [true if all items in set are present in argument set]
set.issuperset                      [true if set contains all items in argument set]
set.pop, set.remove                 [remove random item or specific item (with error)]
set.symmetric_difference (_update)  [return all items, except those present in both sets, can update]
set.union                           [union of 1 or more iterables to the set]

SPECIAL FUNCTIONS
-----------------

  zip()                 zips two similar sized iterables into an iterable of tuplesq

  map(func, iter):      returns a list of results after applying function 'fun' to each item of
                        the iterable 'iter'

  filter(func, seq):    filters out a sequence (list etc).   The function 'fun' is applied to each
                        item in the sequence 'seq' and if it returns True, the item is returned.

  reduce(func, seq):    Must be imported from functools.   Example for a = [1,2,3,4] and
                        reduce(lambda x,y: x+y,z)
                        - 1 plus 2 is three, three plus 3 is 6, 6 plus 4 is 10
                        - produces a single result of 10

   bisect_left(itr,x)   Must be imported from bisect, search from left and find index of the first
                        number where x is less than or equal to this number.   If x is bigger than
                        the last number, 1 ia added to the last index, ie out of bounds.   Use
                        result with .index(result, object).   iter MUST BE SORTED ASCENDING.
   
   bisect_right(itr,x)  Must be imported from bisect, search from right and find index of the first
                        number where x is less than this number but greater than or equal to i-1.
                        If you want the index of the last number, subtract 1 from the result.   If
                        x is bigger than the last number, 1 is added to the last index, ie out of bounds.
                        Use result with .insert(result, object).   iter MUST BE SORTED ASCENDING.

TYPE HINTING
============

Examples:

   from typing import List, Set, Tuple, Dict, Union, Optional

   def get_full_name(first_name: str, last_name: str) -> str:
      ....

   def process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]) -> int:
      ....

   def process_items(prices: Dict[str, float]):
      ....

   def process_items(item: Union[int, str]):        # multiple types
      ....

   def process_items(name: Optional[str] = None):
      ....

DATACLASSES
===========

   These are used to automatically add functions to a class such as __init__, __eq__ etc.
   You need to 'from dataclasses import dataclass' and then use something like this:

   @dataclass
   class InventoryItem:
      name: str
      unit_price: float
      quantity_on_hand: int = 0

      def total_cost(self) -> float:
         return self.unit_price * self.quantity_on_hand

   It is possible to control which dunder functions are built with arguments to dataclass
   decorator.
   There are useful functions such as asdict(), astuple(), is_dataclass() that may be
   useful.

PYDANTIC
========

  Python library to perform data validation.   You create an instance of that class
  with some values and it will validate the values, convert them to the appropriate
  type and give you an object with all the data and get all of the editor support
  with that resulting object.

  Example:

  from datetime import datetime
  from typing import List, Optional
  from pydantic import BaseModel

  class User(BaseModel):
     id: int
     name = "John Doe"
     signup_ts: Optional[datetime] = None
     friends: List[int] = []

  external_data = {
    "id": "123",
    "signup_ts: "2017-06-01 12:22",
    "friends": [1, "2", b"3"]
  }

  user = User(**external_data)
