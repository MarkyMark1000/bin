Poetry
======

  poetry --version
  poetry self update

  [If you want to configure poetry so that virtual envs are within project directory]
  poetry config virtualenvs.in-project true

  [prefer to init in project]
  poetry init

  [less keen, but interesting structure and tests]
  poetry new <new-project>                      [create a new project]
  poetry new rp-poetry --name realpoetry        [use name realpoetry instead]
  poetry new --src rp-poetry                    [put rp-poetry dir in src dir]

  poetry env use python3                        [give poetry path to python file]

  poetry add requests                           [add package to poetry]
  poetry add black --group dev                  [add black to dev environment]
  poetry add black@latest -- group dev
  poetry remove black                           [remove package]

  poetry installed                              [installs stuff into virtual env and]
                                                [evaluates dependencies etc]

  poetry update                                 [get latest dependencies and update]

  poetry env list                               [list poetry virtual environments]
  poetry config --list                          [list current configuration]
  poetry env remove <envname>                   [remove virtual environment]

  [running poetry lock processes all dependencies in project.toml file and locks]
  [then in poetry.lock file]
  poetry lock

  poetry run python                             [run python in poetry virtual env]

  poetry run python3 hello.pydantic             [run script in poetry]

  poetry check                                  [make sure poetry files are Ok]

  [export poetry environment into requirements files]
  poetry export --output requirements.txt --without-hashes
  poetry export --output requirements_dev.txt --dev --without-hashes
  [or in the latest version of poetry]
  poetry export --output requirements_dev.txt --with dev --without-hashes

  pyproject.toml
  --------------

  The packages that you add to the project and which group they are in tend
  to be added to the pyproject.toml file.   Here are some useful notes for
  upgrading (which can be a real pain):

  - It tends to specify a python version at the top, eg:
  python = "^3.8"

  - There are different ways to specify python packages:
    - Exact version, eg mypackage = "2.1.7"
    - Caret version, eg mypackage = "^2.1.7", this allows poetry to upgrade to
      any version that does not change the left most digit.
    - Tilde version, eg mypackage = "~2.1.7", effect depends upon the numbers
      you specify.   "~2.1.7" would only allow patch level changes, if you use
      "~2.1", then it would allow >=2.1 < 2.2.   "~2" would allow anything
      starting with a 2.   Warning - might cause confusion down the line.
    - Wildcard version, where any number is allowed at the wildcard, eg
      "2.1.*"
    - One or more specific inequalities, eg: mypackage = ">= 1.2, < 1.5, !=1.2.2"
  
  - Note - adjusting these manually can result in problem solver errors.   If you
    hit this, try adding/removing them manually using poetry add.