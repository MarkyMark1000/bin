JEST / VITEST
=============

Testing framework for javascript.

NOTE: in a tutorial that I did, it mentioned that 99% of jest commands are similar
      to vitest commands.

There is also a website called 'testing library' that has testing libraries for
many frameworks including 'react', 'native', 'vue' etc.   Look on here for help
with a specific framework:

https://testing-library.com/

Structure
---------

    Most tests are structured around a group of tests (describe) which can contain
    initialization functions and sub tests.   It then checks for the expeected result.
    Depending upon the project, you may not need to import describe, expect etc.
    Also, please note the following:
      - it is common practice to use it instead of test.
      - you can also nest describe blocks of tests within each other

    Example:

    import {describe, expect, test} from '@jest/globals';

    describe('sum module', () => {
    test('adds 1 + 2 to equal 3', () => {
        expect(sum(1, 2)).toBe(3);
    });
    });

Debugging
---------

  - You can add breakpoints within VSCode and then run the tests using something like 'yarn test'
    within a 'javascript' version of the termnal (not bash, zsh etc).   The test should then stop
    on the breakpoint.
  - You can install the 'JEST' extension which will add arrows/markers to each describe and test
    block.   You can run tests or right click and debug them.
  - This code may be useful for printing thins like the difference between two objects, type etc:
    - // pretty print difference between two objects:
      const {diff} = require('jest-diff');
      const result = diff(a, b);
      console.log(result);
    - // useful for getting the type of a variable
      const {getType} = require('jest-get-type');
      console.log(getType(array));
    - // output object in pretty format
      const {format: prettyFormat} = require('pretty-format');
      console.log(prettyFormat(val));
  - REACT:
    - react tends to use a render(), screen combination when running unit tests.   To help with
      debugging add screen.debug().
  - VUE:
    - the debugger; doesn't work automatically, try adding this, although it should be noted
      that this was for vitest, but may work for jest:
        - debugger; // eslint-disable-line

Matchers
--------

    .toBe               - to be a value
    .toEqual            - exact equality, useful for objects.
    .toStrictEqual      - same a toEqual, but checks undefined values.
    .not                - eg .not.toBe(4)

    truthiness:
    .toBeNull, .toBeUndefined, toBeDefined, .toBeTruthy, .toBeFalsy

    numbers:
    .toBeGreaterThan, .toBeGreaterThanOrEqual, .toBeLessThan, .toBeLessThanOrEqual

    .toBeCloseTo        - use for floating point numbers

    strings:
    .toMatch            - match a regular expression

    arrays and iterables:
    .toContain          - contains a value

    errors:
    .toThrow            - match specific string or regex

Testing Async code
------------------

    Without using async/await:
    test('the data is peanut butter', () => {
    return fetchData().then(data => {
        expect(data).toBe('peanut butter');
    });
    });

    Using async/await:
    test('the data is peanut butter', async () => {
    const data = await fetchData();
    expect(data).toBe('peanut butter');
    });

    Callbacks:
    If testing callback functions you need to use the done() function, see docs.

    There is an example of async testing:
    https://jestjs.io/docs/tutorial-async

Repeating Setup
---------------

    You can setup and teardown characteristics before/after each test.   These
    functions can be added into describe blocks as well as on a module level.

    This is particularly useful for making sure mocks are cleared before and after
    each test.   Example:

    import { cleanup } from "@testing-library/react";
    afterEach(()=> {
        cleanup();
        jest.clearAllMocks();
    })

    Other functions include:
      - beforeEach          // before each unit test
      - afterEach           // after each unit test
      - beforeAll           // run once before tests
      - afterAll            // run once after tests

Mocking
-------

Mocking is quite big and i'm only going to briefly outline it:

- Can define a mock function, then test the number of calls, result value etc:

    const mockCallback = jest.fn(x => 42 + x);

    myFunction([0, 1], mockCallback);

    expect(mockCallback.mock.calls).toHaveLength(2);
    expect(mockCallback.mock.calls[0][0]).toBe(0);
    expect(mockCallback.mock.results[0].value).toBe(42);

- You can mock modules, eg api calls:

    import axios from 'axios';
    import Users from './users';

    jest.mock('axios');         // MOCK AXIOS API CALL

    test('should fetch users', () => {
    const users = [{name: 'Bob'}];
    const resp = {data: users};
    axios.get.mockResolvedValue(resp);
    axios.get.mockResolvedValue(resp);

    // or you could use the following depending on your use case:
    // axios.get.mockImplementation(() => Promise.resolve(resp))

    // return Users.all().then(data => expect(data).toEqual(users));

Snapshot Testing
----------------

A snapshot of a particular component is saved in __snapshots__ directory.   The test compares
the lookf of an actual component to the snapshot.   Should you update the structure of the
component, you will need to update the snapshots with this:

    jest --updateSnapshot           (eg yarn snapshot)

A typical example:

    import renderer from 'react-test-renderer';
    ...
    const tree = renderer
        .create(<Link page="http://www.facebook.com">Facebook</Link>)
        .toJSON();
    expect(tree).toMatchSnapshot();

REACT and REACT NATIVE
======================

Use the react or native testing library from 'testing library':
https://testing-library.com/

In general you will import some specific functions for rendering components,
they populate a screen object that you analyse and test.

Example:

  import { render, screen } from "@testing-library/react";    // OR
  import { render, screen } from "@testing-library/react-native";

  render(<MyComponent />);
  let obj = screen.queryByTestId("myTestID");
  expect(obj).toBeOnTheScreen();

IMPORTANT:   Good practice is to populate your code with test id's and then
             getByTestId, queryByTestId etc in your code.   The test id's
             are typically declared using this format:

             <SomeComponent testID="MyUniqueID" />
             <SomeComponent data-testid=“MyUniqueID” />

             You would then try to validate data using something like this:

             expect(screen.getByTestId("MyUniqueID")).toBeInTheDocument()
             expect(screen.getByTestId(“MyUniqueID”)).toHaveTextContent(“SomeText”)

REACT - Components That Render Multiple Rows
--------------------------------------------

Example:

render(<Pagination total={50} limit={10} currentPage={1} />)
const pageContainers = screen.getAllByTestId(‘page-container’)
expect(pageContainers).toHaveLength(5)
expect(pageContainers[0]).toHaveTextContent(“1”)

REACT - Mock vs spyOn
---------------------

  Mocks:
    - Used to isolate code from dependencies
    - Can test if the function was called.

  Spies:
    - Used to test real objects in isolation and allow us to verify their behavior.
    - You want to add your own implementation just for a specific scenario and then
      reset it again via mockRestore()
    - Want to see if the function was called.

  I found a useful article which suggested adding these settings to the jest config:

    clearMocks - useful after each test case if getting call counts that are wrong
    resetMocks - useful before each test if returning mocked results from prev tests
    restoreMocks - only for spyOn and useful after each test, or spyOn remains.

REACT Mock
----------

Lets say you have a module called utils with a function called range, but you don't
want to actually call that function.   You can mock it by adding this to the top of
the test.   IMPORTANT - All Mocks might be moved to the top of the test !!!!!

Example:

  vi.mock(“../utils”, () => {
    return {
        range: () => [1,2,3,4,5]      // range returns and array from 1 to 5
  }
  })

REACT spyOn
-----------

You can spy on external functions and potentially replace their implemenation.   You
need to import the library being spied on:

IMPORTANT: call jest.restoreAllMocks after each test in an afterEach block!!!

Example:

  import * as utils from ‘../utils’
  vi.spyOn(utils, “range”)
  render(….)
  expect(utils.range).toHaveBeenCalledWith(1,5)

Example 2:

  const mockResponse = {
    data: [{ id: "1", name: "bar" }],
  };
  vi.spyOn(axios, "get").mockResolvedValue(mockResponse);

If you have say a class/function containing a function you can specify if it is
'get', 'set' etc:

  const spy = jest.spyOn(video, 'play', 'get');

REACT - Test State, function calls, and user Input
--------------------------------------------------

  - try to write a test similar to how the user would use the page
  - You need to use async and await
  - example:

    // setup system for handling usr input and a mock function for handleClick
    const user = userEvent.setup()
    const handleClick = vi.fn()
    // render page
    render(<Pagination total={50} limit={10} currentPage={1} selectPage={handleClick} />)
    const pageContainers = screen.getAllByTestId(‘page-container’)
    // simulate a click
    await user.click(pageContainers[0])
    // check mock function is called
    expect(handleClick).toHaveBeenCalledOnce()
    expect(handleClick).toHaveBeenCalledWith(‘1’)
    // add data to an input box and check the value
    const usernameInput = screen.getByTestId("usernameInput");
    await user.type(usernameInput, "foo");
    expect(screen.getByTestId("username")).toHaveTextContent("foo");
  
REACT - Test useEffect
----------------------

There are libraries that you can install such as msw that let you mock calls to external api's.

As an alternative you can spy on api calls (eg axios) using spyOn.   DONT FORGET TO CLEAR THE
SPYON WITH restoreAllMocks.

describe("Tags", () => {
  it("renders tags", async () => {
    // define data returned by api endpoint
    const mockResponse = {
      data: [{ id: "1", name: "bar" }],
    };
    // spy on axios and mock the response
    vi.spyOn(axios, "get").mockResolvedValue(mockResponse);
    render(<Tags />);
    // use find as works with async well
    const tags = await screen.findAllByTestId("tag");
    expect(tags).toHaveLength(1);
    expect(tags[0]).toHaveTextContent("bar");
  });
});

REACT - Test custom Hooks
-------------------------

renderHook and act method is used largely with custom hooks.   Lets say you create
a custom hook that has some state to record a count, but also has a function called
increment that increases the state.   It returns {count, increment}

Example:

  import useCounter from "./useCounter";
  ...
  // make sure the custom hook has an initial value of 0
  it("should render initial count", () => {
    // call the hook using renderHook
    const { result } = renderHook(() => useCounter());
    // access count via result.current
    expect(result.current.count).toEqual(0);
  });
  // default prop of 10 works and sets count to 10
  it("should render initial count", () => {
    // call the hook using renderHook
    const { result } = renderHook(() => useCounter(10));
    // access count via result.current
    expect(result.current.count).toEqual(10);
  });
  // test the increment function
  it("should increment the count", () => {
    // render the hook with no default, so count is zero
    const { result } = renderHook(() => useCounter());
    // need to use the act function when running routines within a custom hook:
    act(() => {
      result.current.increment();
    });
    // check the count has changed to 1
    expect(result.current.count).toEqual(1);
  });

REACT - Custom Renders (Video 21)
----------------------

When writing unit tests it can be a bit laborious writing long render statements that contain context’s,
so you can write custom render functions at the top of the test, eg:

export const customRender = (ui, providerProps) => {
   return render(
	<TodosContext.Provider value={providerProps}>{ui}</TodosContext.Provider>
   )
}

REACT - Shallow Rendering
-------------------------

When writing a unit test for a component that contains other components, you want to test the other
component individually, but you don’t necessarily want to render that sub component because large
projects can have components within components etc.   The old unit testing framework had shallow
rendering, but this isn’t available in this, so instead, what he does
is mock the component that is being rendered and returns a div with some data in it:

  vi.mock("./Todo", () => {
    return {
      default: (props) => {
        return <div>todo</div>;
      },
    };
  });

You might want to test what props the mock component was called with, so you can do something like this:

  const mockTodo = vi.fn();
  vi.mock("./Todo", () => {
    return {
      default: (props) => {
        mockTodo(props);
        return <div>todo</div>;
      },
    };
  });

Within your unit tests, you can then do things like:

  expect(mockTodo).toHaveBeenCalledTimes(2);
  expect(mockTodo).toHaveBeenNthCalledWith(…..);

REACT - setTimeout
------------------

This is a bit tricky if you have a timer that waits 2 seconds before an update is made.
The typical async await won’t work and if you get your test to wait 2 seconds then it
can really slow the tests down.   We use in built functionality to basically replace
the timer with a fake timer.   This must be set before the test and turned off afterwards.
Also we need to move the timer forward by 2 seconds.   Example code:

Example:

  beforeEach(() => {
    // turn on fake timer before each test
    vi.useFakeTimers({ shouldAdvanceTime: true });
  });

  afterEach(() => {
    // turn off fake timer after each test
    vi.useRealTimers();
  });

  it("renders corrent result", async () => {
    render(<Waiter />);
    // advance the time of the timer by 2 seconds
    act(() => {
      vi.advanceTimersByTime(2000);
    });
    // then perform usual tests checks:
    const waiter = await screen.findByTestId("waiter");
    expect(waiter).toHaveTextContent("passed");
  });


REACT - Extra Notes
-------------------

Testing can be complex, read notes and watch videos if you get stuck.   Can also look
in github such as the Expo code base.

Testing things like context and redux can be complicated, watch video's for examples.

Can get text using case insensitive search:
const linkElement = screen.getByText(/learn react/i);   // i means case insensitive

We use the 'find' functions (ie findAllByRole) which return a promise and wait
for the desired result.

  Example:

    test('renders posts if request succeeds', async () => {
      render(<Async />)
      const listItemElements = await screen.findAllByRole('listitem');
      expect(listItemElements).not.toHaveLength(0);
    });

Another way to mock fetch calls:

  Example:

    test('renders posts if request succeeds', async () => {
      // mock fetch in the window object
      window.fetch = jest.fn();
      window.fetch.mockResolvedValueOnce({
        json: async () => [{ id: 'p1', title: 'First post' }],
      });
      // render the componennt
      render(<Async />);
      // wait for the result and check it isn't 0
      const listItemElements = await screen.findAllByRole('listitem');
      expect(listItemElements).not.toHaveLength(0);
    });

Matchers:

  These typically take a format such as expect(element).toBeOnTheScreen()

  toBeOnTheScreen()           toHaveTextContent()               toContainElement()
  toBeEmptyElement()          toHaveDisplayValue()              toHaveAccessibilityValue()
  toBeEnabled()               toBeDisabled()                    toBeSelected()
  toBeChecked()               toBePartiallyChecked()            toBeExpanded()
  toBeCollapsed()             toBeBusy()                        toBeVisible()
  toHaveStyle()               toHaveAccessibleName()            toHaveProp()

VUE
===

Vue - Testing Components
------------------------

Load the component using mount or shallowMount (try mount first, if not shallowMount):

const wrapper = mount(App);

Then to test if an element, class, id etc exists:
expect(wrapper.find('element').exists()).toBeTruthy()
expect(wrapper.find('.class_name').exists()).toBeTruthy()
expect(wrapper.find('#id_name').exists()).toBeTruthy()
expect(wrapper.find('[attribute='value']').exists()).toBe(true)

You can find sub-components, eg:
wrapper.findComponent(child_component)              // directly imported component
wrapper.findComponent({name: 'child_component'})    // by name
wrapper.findComponent('child_component')
wrapper.findComponent('.child_component_class')
wrapper.findComponnet('#child_component_id')

To deal with props, you can pass them in:
const wrapper = mount(App, {
    props: {
    greeting: 'Blah de Blah'
    }
})
expect(wrapper.text()).toContain('Blah de Blah')

Can test a child component for its props:
expect(child_wrapper.props('prop_name')).toBe(prop_value)

Vue - DOM Updates
-----------------

Quite often you will get situations where you hit a button and it performs
some action.   Unfortunately the dom does not update instantly, so you may
need to use async and await:
it('increments counter when button is clicked', async () => {
  const wrapper = mount(App);
  await wrapper.find('button').trigger('click');
  expect(wrapper.text()).toBe('Clicks: 1');
})

Vue - VUEX Example
------------------

There are potentially more advanced aspects to this, but as an example:

import { createStore } from 'vuex';
import store from '@/store/index';

describe('Vuex', () => {

  beforeEach(() => {
    // reset state before each test so doesn't interfer with each other
    store.state.coumt = 0;
  })

  it('test-summary', () => {

    // commit mutation
    store.commit('mutation_function');

    // test its effect
    expect(store.state.value).toBe(value);
  })

})

Vue - ROUTING Example
---------------------

Dreate a local version of the router (could import) and process asnyncronously
to give the router time to navigate to the page:

import { mount } from '@vue/test-utils';
import { createRouter, createWebHistory } from 'vue-router';

import App from '../../src/App.vue';
import AboutView from '../../srv/views/AboutView.vue';

describe('App', () => {

  it('renders a component via routing', async () => {
    // potentially import files rather than create locally!!
    const router = createRouter({
      history: createWebHistory(),
      routes: [{
        path: '/about',
        name: 'About',
        component: AboutView
      }]
    });

    router.push('/about');
    await router.isReady();

    const wrapper = mount(App, {
      global: {
        plugins: [router]
      }
    });

  })
})


Examples
--------

Timer Mocks:
https://jestjs.io/docs/timer-mocks

Async Mocks
https://jestjs.io/docs/tutorial-async