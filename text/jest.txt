JEST
======

Testing framework for javascript.

Examples
--------

Timer Mocks:
https://jestjs.io/docs/timer-mocks

Async Mocks
https://jestjs.io/docs/tutorial-async

Structure
---------

    Most tests are structured around a group of tests (describe) which can contain
    initialization functions and sub tests.   It then checks for the expeected result:

    import {describe, expect, test} from '@jest/globals';

    describe('sum module', () => {
    test('adds 1 + 2 to equal 3', () => {
        expect(sum(1, 2)).toBe(3);
    });
    });

    YOU CAN NEST describe BLOCKS WITHIN EACH OTHER!!!

Useful for Debugging
--------------------

    // pretty print difference between two objects:
    const {diff} = require('jest-diff');
    const result = diff(a, b);
    console.log(result);

    // useful for getting the type of a variable
    const {getType} = require('jest-get-type');
    console.log(getType(array));

    // output object in pretty format
    const {format: prettyFormat} = require('pretty-format');
    console.log(prettyFormat(val));

Matchers
--------

    .toBe               - to be a value
    .toEqual            - exact equality, useful for objects.
    .toStrictEqual      - same a toEqual, but checks undefined values.
    .not                - eg .not.toBe(4)

    truthiness:
    .toBeNull, .toBeUndefined, toBeDefined, .toBeTruthy, .toBeFalsy

    numbers:
    .toBeGreaterThan, .toBeGreaterThanOrEqual, .toBeLessThan, .toBeLessThanOrEqual

    .toBeCloseTo        - use for floating point numbers

    strings:
    .toMatch            - match a regular expression

    arrays and iterables:
    .toContain          - contains a value

    errors:
    .toThrow            - match specific string or regex

Testing Async code
------------------

    Without using async/await:
    test('the data is peanut butter', () => {
    return fetchData().then(data => {
        expect(data).toBe('peanut butter');
    });
    });

    Using async/await:
    test('the data is peanut butter', async () => {
    const data = await fetchData();
    expect(data).toBe('peanut butter');
    });

    Callbacks:
    If testing callback functions you need to use the done() function, see docs.

    There is an example of async testing:
    https://jestjs.io/docs/tutorial-async

Repeating Setup
---------------

    Can setup or teardown characteristics before/after each test, works well when
    enclosed in describe:

    beforeEach(() => {
    initializeCityDatabase();
    });

    afterEach(() => {
    clearCityDatabase();
    });

    You can also do one time setups:

    beforeAll(() => {
    return initializeCityDatabase();
    });

    afterAll(() => {
    return clearCityDatabase();
    });

Mocking
-------

Mocking is quite big and i'm only going to briefly outline it:
https://jestjs.io/docs/mock-functions

- Can define a mock function, then test the number of calls, result value etc:

    const mockCallback = jest.fn(x => 42 + x);

    myFunction([0, 1], mockCallback);

    expect(mockCallback.mock.calls).toHaveLength(2);
    expect(mockCallback.mock.calls[0][0]).toBe(0);
    expect(mockCallback.mock.results[0].value).toBe(42);

- You can mock modules, eg api calls:

    import axios from 'axios';
    import Users from './users';

    jest.mock('axios');         // MOCK AXIOS API CALL

    test('should fetch users', () => {
    const users = [{name: 'Bob'}];
    const resp = {data: users};
    axios.get.mockResolvedValue(resp);
    axios.get.mockResolvedValue(resp);

    // or you could use the following depending on your use case:
    // axios.get.mockImplementation(() => Promise.resolve(resp))

    return Users.all().then(data => expect(data).toEqual(users));
    })

Snapshot Testing
----------------

A typical snapshot test case renders a UI component, takes a snapshot, then compares it to a
reference snapshot file stored alongside the test. The test will fail if the two snapshots do not match,
either the change is unexpected, or the reference snapshot needs to be updated to the new
version of the UI component.

    import renderer from 'react-test-renderer';
    import Link from '../Link';

    it('renders correctly', () => {
    const tree = renderer
        .create(<Link page="http://www.facebook.com">Facebook</Link>)
        .toJSON();
    expect(tree).toMatchSnapshot();
    });

If you need to update the snapshots, run:

    jest --updateSnapshot

Vue - Testing Components
------------------------

Load the component using mount or shallowMount (try mount first, if not shallowMount):

const wrapper = mount(App);

Then to test if an element, class, id etc exists:
expect(wrapper.find('element').exists()).toBeTruthy()
expect(wrapper.find('.class_name').exists()).toBeTruthy()
expect(wrapper.find('#id_name').exists()).toBeTruthy()
expect(wrapper.find('[attribute='value']').exists()).toBe(true)

You can find sub-components, eg:
wrapper.findComponent(child_component)              // directly imported component
wrapper.findComponent({name: 'child_component'})    // by name
wrapper.findComponent('child_component')
wrapper.findComponent('.child_component_class')
wrapper.findComponnet('#child_component_id')

To deal with props, you can pass them in:
const wrapper = mount(App, {
    props: {
    greeting: 'Blah de Blah'
    }
})
expect(wrapper.text()).toContain('Blah de Blah')

Can test a child component for its props:
expect(child_wrapper.props('prop_name')).toBe(prop_value)

Vue - DOM Updates
-----------------

Quite often you will get situations where you hit a button and it performs
some action.   Unfortunately the dom does not update instantly, so you may
need to use async and await:
it('increments counter when button is clicked', async () => {
  const wrapper = mount(App);
  await wrapper.find('button').trigger('click');
  expect(wrapper.text()).toBe('Clicks: 1');
})

Vue - VUEX Example
------------------

There are potentially more advanced aspects to this, but as an example:

import { createStore } from 'vuex';
import store from '@/store/index';

describe('Vuex', () => {

  beforeEach(() => {
    // reset state before each test so doesn't interfer with each other
    store.state.coumt = 0;
  })

  it('test-summary', () => {

    // commit mutation
    store.commit('mutation_function');

    // test its effect
    expect(store.state.value).toBe(value);
  })

})

Vue - ROUTING Example
---------------------

Dreate a local version of the router (could import) and process asnyncronously
to give the router time to navigate to the page:

import { mount } from '@vue/test-utils';
import { createRouter, createWebHistory } from 'vue-router';

import App from '../../src/App.vue';
import AboutView from '../../srv/views/AboutView.vue';

describe('App', () => {

  it('renders a component via routing', async () => {
    // potentially import files rather than create locally!!
    const router = createRouter({
      history: createWebHistory(),
      routes: [{
        path: '/about',
        name: 'About',
        component: AboutView
      }]
    });

    router.push('/about');
    await router.isReady();

    const wrapper = mount(App, {
      global: {
        plugins: [router]
      }
    });

  })
})