LIST OF USEFUL EXTENSIONS
=========================

  - Back & Forth  (Adds back/forth naviation buttons)
  - Bookmarks (Mark lines and jump between them)
  - Current File Path (display current files path)
  - Docker (create, manage containers, very useful)
  - GitLens (Vizualize code authorship, very useful)
  - open in browser (open current file in browser)
  - OpenAPI (Swagger) Editor (checks format of swagger)
  - Pylance (intellisence etc)
  - Python (linting, debugging etc, very useful)
  - SQL Formatter (format sql files)
  - Volar (Vue Language features)
  - YAML
  - Format in Context Menus (format multiple files in one go)
  - JEST
  - vitest

COMPARE TWO FILES
=================

  - Right click file and hit 'select for compare'
  - Right click second file and hit 'compare with selected'

COMPARE TWO PIECES OF CODE
==========================

  - Find one piece of code, select it, right click and select 'Select Text for Compare'
  - Find a second piece of code, select it, right click and select 'Compare Text with previous Selection'

ANALYSING GIT HISTORY
=====================

  FOR SINGLE FILE
  ---------------

    - Explorer Icon -> TimeLine
      Shows changes in the file over time.   You can use 'Select for Compare' and 'Compare with Selected'
      to see changes between different commits over time.   If you have GitLens installed, you can also
      use git blame - icon in top right, right click the icon.
    - Gitlens/Gitlens Inspect -> File HISTORY

  FOR 2 COMMITS OR A BRANCH/COMMITS
  ---------------------------------

    - Gitlens/Gitlens Inspect -> Search & Compare.
      Clear and previous comparisons and then hit the compare references button.   Select the
      appropriate HEAD or commit codes.

  INDIVIDUAL LINES OF CODE
  ------------------------

    - Hovering over class
    - Gitlens Icon in top right, 'File Annotations'.   Hit 'Toggle File Blame'.   It lists commits
      against lines of code that they impacted.   Hit 'File Annotations' againt to get rid of it.

DEBUGGING
=========

  JAVASCRIPT/TYPESCRIPT
  ---------------------

    There are multiple methods for this:
    - Add a breakpoint within VSCode, then open a 'javascript' terminal, rathern than bash/zsh etc.
      If you then run the tests as normal, eg 'yarn test', it should stop on the breakpoint.
    - Install the 'JEST' extension.   This should add debugging arrows to each test that you can either
      run or right click and debug.
    - Install the VITEST extension, which similarly adds features for debugging unit tests written in
      vitest.
  
  PYTHON

    - Works for default unit test framework and pytest.
    - You need to select the appropriate virtual environment.   Run 'Python: Select Interpreter' within
      the command pallet and select the appropriate virtual environment.
    - It can be useful to have the Python extension installed.
    - Open a python file and you should be able to see a 'testing' icon on the left (looks like a
      chemistry flask).
    - Hit the 'configure tests' button, which can be used to select the test folder.   You may need a
      glob pattern for finding tests.
    - It should automatically find the tests, but Run 'Test: Refresh Tests' within the command pallet
      if it doesn't find them.